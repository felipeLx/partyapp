{"version":3,"file":"react-query.production.min.js","sources":["../src/utils.js","../src/config.js","../src/queryCache.js","../src/setFocusHandler.js","../src/useMutation.js","../src/useBaseQuery.js","../src/useInfiniteQuery.js","../src/useIsFetching.js","../src/usePaginatedQuery.js","../src/useQuery.js"],"sourcesContent":["import React from 'react'\n\n//\n\nexport const statusIdle = 'idle'\nexport const statusLoading = 'loading'\nexport const statusError = 'error'\nexport const statusSuccess = 'success'\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport let globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport const noop = () => {}\nexport const identity = d => d\nexport let Console = console || { error: noop, warn: noop, log: noop }\n\nexport function useUid() {\n  const ref = React.useRef(null)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function setConsole(c) {\n  Console = c\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function stableStringifyReplacer(_, value) {\n  return isObject(value)\n    ? Object.assign(\n        {},\n        ...Object.keys(value)\n          .sort()\n          .map(key => ({\n            [key]: value[key],\n          }))\n      )\n    : value\n}\n\nexport function stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer)\n}\n\nexport function isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a, b) {\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return a === b\n}\n\nexport function isDocumentVisible() {\n  return (\n    typeof document === 'undefined' ||\n    document.visibilityState === undefined ||\n    document.visibilityState === 'visible' ||\n    document.visibilityState === 'prerender'\n  )\n}\n\nexport function isOnline() {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (\n      args[0].hasOwnProperty('queryKey') &&\n      args[0].hasOwnProperty('queryFn')\n    ) {\n      const { queryKey, variables = [], queryFn, config = {} } = args[0]\n      return [queryKey, variables, queryFn, config]\n    } else {\n      throw new Error('queryKey and queryFn keys are required.')\n    }\n  }\n\n  if (typeof args[2] === 'function') {\n    const [queryKey, variables = [], queryFn, config = {}] = args\n    return [queryKey, variables, queryFn, config]\n  }\n\n  const [queryKey, queryFn, config = {}] = args\n\n  return [queryKey, [], queryFn, config]\n}\n\nexport function useMountedCallback(callback) {\n  const mounted = React.useRef(false)\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n  return React.useCallback(\n    (...args) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  )\n}\n\nexport function handleSuspense(queryInfo) {\n  if (queryInfo.config.suspense || queryInfo.config.useErrorBoundary) {\n    if (queryInfo.status === statusError) {\n      throw queryInfo.error\n    }\n  }\n\n  if (queryInfo.config.suspense) {\n    if (queryInfo.status === statusLoading) {\n      queryInfo.query.wasSuspended = true\n      throw queryInfo.refetch()\n    }\n  }\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nexport function deepEqual(a, b) {\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\n      return true\n    }\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      var key = keys[i]\n\n      if (!deepEqual(a[key], b[key])) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n","import React from 'react'\nimport { noop, stableStringify, identity, deepEqual } from './utils'\n\nexport const configContext = React.createContext()\n\nexport const defaultConfigRef = {\n  current: {\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchAllOnWindowFocus: true,\n    refetchInterval: false,\n    suspense: false,\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    queryFnParamsFilter: identity,\n    throwOnError: false,\n    useErrorBoundary: undefined, // this will default to the suspense value\n    onMutate: noop,\n    onSuccess: noop,\n    onError: noop,\n    onSettled: noop,\n    refetchOnMount: true,\n    isDataEqual: deepEqual,\n  },\n}\n\nexport function useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current\n}\n\nexport function ReactQueryConfigProvider({ config, children }) {\n  let configContextValue = React.useContext(configContext)\n\n  const newConfig = React.useMemo(() => {\n    const newConfig = {\n      ...(configContextValue || defaultConfigRef.current),\n      ...config,\n    }\n\n    // Default useErrorBoundary to the suspense value\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense\n    }\n\n    return newConfig\n  }, [config, configContextValue])\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n\nexport function defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return []\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey())\n    } catch {\n      return []\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey]\n  }\n\n  const queryHash = stableStringify(queryKey)\n  queryKey = JSON.parse(queryHash)\n\n  return [queryHash, queryKey]\n}\n","import {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  getQueryArgs,\n  deepIncludes,\n  noop,\n} from './utils'\nimport { defaultConfigRef } from './config'\n\nexport const queryCache = makeQueryCache()\n\nconst actionInit = {}\nconst actionFailed = {}\nconst actionMarkStale = {}\nconst actionMarkGC = {}\nconst actionFetch = {}\nconst actionSuccess = {}\nconst actionError = {}\nconst actionSetState = {}\n\nexport function makeQueryCache() {\n  const listeners = []\n\n  const cache = {\n    queries: {},\n    isFetching: 0,\n  }\n\n  const notifyGlobalListeners = () => {\n    cache.isFetching = Object.values(queryCache.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n    listeners.forEach(d => d(cache))\n  }\n\n  cache.subscribe = cb => {\n    listeners.push(cb)\n    return () => {\n      listeners.splice(listeners.indexOf(cb), 1)\n    }\n  }\n\n  cache.clear = () => {\n    cache.queries = {}\n    notifyGlobalListeners()\n  }\n\n  const findQueries = (predicate, { exact } = {}) => {\n    if (typeof predicate !== 'function') {\n      const [\n        queryHash,\n        queryKey,\n      ] = defaultConfigRef.current.queryKeySerializerFn(predicate)\n      predicate = d =>\n        exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(cache.queries).filter(predicate)\n  }\n\n  cache.getQueries = findQueries\n\n  cache.getQuery = queryKey => findQueries(queryKey, { exact: true })[0]\n\n  cache.getQueryData = queryKey => cache.getQuery(queryKey)?.state.data\n\n  cache.removeQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      clearTimeout(query.staleTimeout)\n      delete cache.queries[query.queryHash]\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.refetchQueries = async (\n    predicate,\n    { exact, throwOnError, force } = {}\n  ) => {\n    const foundQueries =\n      predicate === true\n        ? Object.values(cache.queries)\n        : findQueries(predicate, { exact })\n\n    try {\n      return await Promise.all(\n        foundQueries.map(query => query.fetch({ force }))\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  cache._buildQuery = (userQueryKey, queryVariables, queryFn, config) => {\n    let [queryHash, queryKey] = config.queryKeySerializerFn(userQueryKey)\n\n    let query = cache.queries[queryHash]\n\n    if (query) {\n      Object.assign(query, { queryVariables, queryFn })\n      query.config = { ...query.config, ...config }\n    } else {\n      query = makeQuery({\n        queryKey,\n        queryHash,\n        queryVariables,\n        queryFn,\n        config,\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  cache.prefetchQuery = async (...args) => {\n    let [\n      queryKey,\n      queryVariables,\n      queryFn,\n      { force, ...config },\n    ] = getQueryArgs(args)\n\n    config = {\n      ...defaultConfigRef.current,\n      ...config,\n    }\n\n    const query = cache._buildQuery(queryKey, queryVariables, queryFn, config)\n\n    // Don't prefetch queries that are fresh, unless force is passed\n    if (query.state.isStale || force) {\n      // Trigger a fetch and return the promise\n      try {\n        const res = await query.fetch({ force })\n        query.wasPrefetched = true\n        return res\n      } catch (err) {\n        if (config.throwOnError) {\n          throw err\n        }\n      }\n    }\n\n    return query.state.data\n  }\n\n  cache.setQueryData = (queryKey, updater, { exact, ...config } = {}) => {\n    let queries = findQueries(queryKey, { exact })\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [\n        cache._buildQuery(queryKey, undefined, () => new Promise(noop), {\n          ...defaultConfigRef.current,\n          ...config,\n        }),\n      ]\n    }\n\n    queries.forEach(d => d.setData(updater))\n  }\n\n  function makeQuery(options) {\n    const reducer = options.config.queryReducer || defaultQueryReducer\n\n    const noQueryHash = typeof options.queryHash === 'undefined'\n\n    const initialData =\n      typeof options.config.initialData === 'function'\n        ? options.config.initialData()\n        : options.config.initialData\n\n    const hasInitialData = typeof initialData !== 'undefined'\n\n    const isStale = noQueryHash ? true : !hasInitialData\n\n    const manual = options.config.manual\n\n    const initialStatus =\n      noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading\n\n    const query = {\n      ...options,\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus,\n        initialData,\n        hasInitialData,\n        isStale,\n        manual,\n      }),\n    }\n\n    const dispatch = action => {\n      query.state = reducer(query.state, action)\n      query.instances.forEach(d => d.onStateUpdate(query.state))\n      notifyGlobalListeners()\n    }\n\n    query.scheduleStaleTimeout = () => {\n      if (query.config.staleTime === Infinity) {\n        return\n      }\n      query.staleTimeout = setTimeout(() => {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({ type: actionMarkStale })\n        }\n      }, query.config.staleTime)\n    }\n\n    query.scheduleGarbageCollection = () => {\n      if (query.config.cacheTime === Infinity) {\n        return\n      }\n      dispatch({ type: actionMarkGC })\n      query.cacheTimeout = setTimeout(\n        () => {\n          cache.removeQueries(\n            d =>\n              d.state.markedForGarbageCollection &&\n              d.queryHash === query.queryHash\n          )\n        },\n        typeof query.state.data === 'undefined' &&\n          query.state.status !== 'error'\n          ? 0\n          : query.config.cacheTime\n      )\n    }\n\n    query.heal = () => {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout)\n\n      // Mark the query as not cancelled\n      query.cancelled = null\n    }\n\n    query.updateInstance = instance => {\n      let found = query.instances.find(d => d.id === instance.id)\n\n      if (found) {\n        Object.assign(found, instance)\n      } else {\n        found = {\n          onStateUpdate: noop,\n          ...instance,\n        }\n        query.instances.push(instance)\n      }\n    }\n\n    query.subscribe = instanceId => {\n      query.heal()\n\n      // Return the unsubscribe function\n      return () => {\n        query.instances = query.instances.filter(d => d.id !== instanceId)\n\n        if (!query.instances.length) {\n          // Cancel any side-effects\n          query.cancelled = cancelledError\n\n          if (query.cancelQueries) {\n            query.cancelQueries()\n          }\n\n          // Schedule garbage collection\n          query.scheduleGarbageCollection()\n        }\n      }\n    }\n\n    // Set up the fetch function\n    const tryFetchData = async (queryFn, ...args) => {\n      try {\n        // Perform the query\n        const promise = queryFn(...query.config.queryFnParamsFilter(args))\n\n        query.cancelQueries = () => promise.cancel?.()\n\n        const data = await promise\n\n        delete query.cancelQueries\n        if (query.cancelled) throw query.cancelled\n\n        return data\n      } catch (error) {\n        delete query.cancelQueries\n        if (query.cancelled) throw query.cancelled\n\n        // If we fail, increase the failureCount\n        dispatch({ type: actionFailed })\n\n        // Do we need to retry the request?\n        if (\n          query.config.retry === true ||\n          query.state.failureCount <= query.config.retry ||\n          (typeof query.config.retry === 'function' &&\n            query.config.retry(query.state.failureCount, error))\n        ) {\n          // Only retry if the document is visible\n          if (!isDocumentVisible()) {\n            // set this flag to continue fetch retries on focus\n            query.shouldContinueRetryOnFocus = true\n            return new Promise(noop)\n          }\n\n          delete query.shouldContinueRetryOnFocus\n\n          // Determine the retryDelay\n          const delay = functionalUpdate(\n            query.config.retryDelay,\n            query.state.failureCount\n          )\n\n          // Return a new promise with the retry\n          return await new Promise((resolve, reject) => {\n            // Keep track of the retry timeout\n            setTimeout(async () => {\n              if (query.cancelled) return reject(query.cancelled)\n\n              try {\n                const data = await tryFetchData(queryFn, ...args)\n                if (query.cancelled) return reject(query.cancelled)\n                resolve(data)\n              } catch (error) {\n                if (query.cancelled) return reject(query.cancelled)\n                reject(error)\n              }\n            }, delay)\n          })\n        }\n\n        throw error\n      }\n    }\n\n    query.fetch = async ({ force, __queryFn = query.queryFn } = {}) => {\n      // Don't refetch fresh queries that don't have a queryHash\n\n      if (!query.queryHash || (!query.state.isStale && !force)) {\n        return\n      }\n\n      // Create a new promise for the query cache if necessary\n      if (!query.promise) {\n        query.promise = (async () => {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null\n\n          try {\n            // Set up the query refreshing state\n            dispatch({ type: actionFetch })\n\n            // Try to fetch\n            let data = await tryFetchData(\n              __queryFn,\n              ...query.queryKey,\n              ...query.queryVariables\n            )\n\n            query.setData(old =>\n              query.config.isDataEqual(old, data) ? old : data\n            )\n\n            query.instances.forEach(\n              instance =>\n                instance.onSuccess && instance.onSuccess(query.state.data)\n            )\n\n            query.instances.forEach(\n              instance =>\n                instance.onSettled && instance.onSettled(query.state.data, null)\n            )\n\n            delete query.promise\n\n            return data\n          } catch (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error,\n            })\n\n            delete query.promise\n\n            if (error !== query.cancelled) {\n              query.instances.forEach(\n                instance => instance.onError && instance.onError(error)\n              )\n\n              query.instances.forEach(\n                instance =>\n                  instance.onSettled && instance.onSettled(undefined, error)\n              )\n\n              throw error\n            }\n          }\n        })()\n      }\n\n      return query.promise\n    }\n\n    query.setState = updater => dispatch({ type: actionSetState, updater })\n\n    query.setData = updater => {\n      // Set data and mark it as cached\n      dispatch({ type: actionSuccess, updater })\n\n      // Schedule a fresh invalidation!\n      clearTimeout(query.staleTimeout)\n      query.scheduleStaleTimeout()\n    }\n\n    return query\n  }\n\n  return cache\n}\n\nexport function defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching:\n          action.hasInitialData || action.manual\n            ? false\n            : action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0,\n      }\n    case actionFailed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case actionMarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case actionMarkGC: {\n      return {\n        ...state,\n        markedForGarbageCollection: true,\n      }\n    }\n    case actionFetch:\n      return {\n        ...state,\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0,\n      }\n    case actionSuccess:\n      return {\n        ...state,\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case actionError:\n      return {\n        ...state,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          status: statusError,\n          error: action.error,\n        }),\n      }\n    case actionSetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      throw new Error()\n  }\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { defaultConfigRef } from './config'\nimport { queryCache } from './queryCache'\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus = () => {\n  const { refetchAllOnWindowFocus } = defaultConfigRef.current\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCache\n      .refetchQueries(query => {\n        if (!query.instances.length) {\n          return false\n        }\n\n        if (query.config.manual === true) {\n          return false\n        }\n\n        if (query.shouldContinueRetryOnFocus) {\n          // delete promise, so `fetch` will create new one\n          delete query.promise\n          return true\n        }\n\n        if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n          return refetchAllOnWindowFocus\n        } else {\n          return query.config.refetchOnWindowFocus\n        }\n      })\n      .catch(Console.error)\n  }\n}\n\nlet removePreviousHandler\n\nexport function setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler(handleFocus => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n})\n","import React from 'react'\n\n//\n\nimport { useConfigContext } from './config'\nimport {\n  statusIdle,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  useGetLatest,\n  Console,\n  uid,\n  useMountedCallback,\n  noop,\n} from './utils'\n\nconst getDefaultState = () => ({\n  status: statusIdle,\n  data: undefined,\n  error: null,\n})\n\nconst actionReset = {}\nconst actionLoading = {}\nconst actionResolve = {}\nconst actionReject = {}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState()\n  }\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading,\n    }\n  }\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data,\n    }\n  }\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error,\n    }\n  }\n  throw new Error()\n}\n\nexport function useMutation(mutationFn, config = {}) {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const getConfig = useGetLatest({\n    ...useConfigContext(),\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef()\n\n  const mutate = React.useCallback(\n    async (\n      variables,\n      { onSuccess = noop, onError = noop, onSettled = noop, throwOnError } = {}\n    ) => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = async () => latestMutationRef.current === mutationId\n\n      dispatch({ type: actionLoading })\n\n      let snapshotValue\n\n      try {\n        snapshotValue = await config.onMutate(variables)\n\n        let data\n\n        if (isLatest()) {\n          data = await getMutationFn()(variables)\n        }\n\n        if (isLatest()) {\n          await onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionResolve, data })\n        }\n\n        return data\n      } catch (error) {\n        if (isLatest()) {\n          Console.error(error)\n          await onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionReject, error })\n\n          if (throwOnError ?? config.throwOnError) {\n            throw error\n          }\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => dispatch({ type: actionReset }), [\n    dispatch,\n  ])\n\n  React.useEffect(() => {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\n//\n\nimport { queryCache } from './queryCache'\nimport { useConfigContext } from './config'\nimport {\n  useUid,\n  isDocumentVisible,\n  Console,\n  useGetLatest,\n  useMountedCallback,\n} from './utils'\n\nexport function useBaseQuery(queryKey, queryVariables, queryFn, config = {}) {\n  const instanceId = useUid()\n\n  config = {\n    ...useConfigContext(),\n    ...config,\n  }\n\n  const queryRef = React.useRef()\n\n  const newQuery = queryCache._buildQuery(\n    queryKey,\n    queryVariables,\n    queryFn,\n    config\n  )\n\n  const useCachedQuery =\n    queryRef.current &&\n    typeof queryRef.current.queryHash === 'undefined' &&\n    typeof newQuery.queryHash === 'undefined'\n\n  // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n  if (!useCachedQuery) {\n    queryRef.current = newQuery\n  }\n\n  const query = queryRef.current\n\n  const [, unsafeRerender] = React.useState()\n\n  const rerender = useMountedCallback(unsafeRerender)\n\n  const getLatestConfig = useGetLatest(config)\n  const refetch = React.useCallback(\n    async ({ throwOnError, ...rest } = {}) => {\n      try {\n        return await query.fetch(rest)\n      } catch (err) {\n        if (throwOnError) {\n          throw err\n        }\n      }\n    },\n    [query]\n  )\n\n  // Create or update this instance of the query\n  query.updateInstance({\n    id: instanceId,\n    onStateUpdate: () => rerender({}),\n    onSuccess: data => getLatestConfig().onSuccess(data),\n    onError: err => getLatestConfig().onError(err),\n    onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n  })\n\n  // After mount, subscribe to the query\n  React.useEffect(() => {\n    return query.subscribe(instanceId)\n  }, [getLatestConfig, instanceId, query, rerender])\n\n  React.useEffect(() => {\n    // Perform the initial fetch for this query if necessary\n    if (\n      !getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n      !query.wasPrefetched && // Don't double fetch for prefetched queries\n      !query.wasSuspended && // Don't double fetch for suspense\n      query.state.isStale && // Only refetch if stale\n      (getLatestConfig().refetchOnMount || query.instances.length === 1)\n    ) {\n      refetch().catch(Console.error)\n    }\n\n    query.wasPrefetched = false\n    query.wasSuspended = false\n  }, [getLatestConfig, query, refetch])\n\n  // Handle refetch interval\n  React.useEffect(() => {\n    const query = queryRef.current\n    if (\n      config.refetchInterval &&\n      (!query.currentRefetchInterval ||\n        // shorter interval should override previous one\n        config.refetchInterval < query.currentRefetchInterval)\n    ) {\n      query.currentRefetchInterval = config.refetchInterval\n      clearInterval(query.refetchIntervalId)\n      query.refetchIntervalId = setInterval(() => {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error)\n        }\n      }, config.refetchInterval)\n\n      return () => {\n        clearInterval(query.refetchIntervalId)\n        delete query.refetchIntervalId\n        delete query.currentRefetchInterval\n      }\n    }\n  }, [config.refetchInterval, config.refetchIntervalInBackground, refetch])\n\n  return {\n    ...query.state,\n    config,\n    query,\n    refetch,\n  }\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, useGetLatest, handleSuspense } from './utils'\n\nexport function useInfiniteQuery(...args) {\n  const queryInfoRef = React.useRef()\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const { getFetchMore } = config\n  const getGetFetchMore = useGetLatest(getFetchMore)\n\n  // The default queryFn will query all pages and map them together\n  const originalQueryFn = queryFn\n\n  queryFn = async () => {\n    const data = []\n    const pageVariables = [...queryInfoRef.current.query.pageVariables]\n    const rebuiltPageVariables = []\n\n    do {\n      const args = pageVariables.shift()\n\n      if (!data.length) {\n        // the first page query doesn't need to be rebuilt\n        data.push(await originalQueryFn(...args))\n        rebuiltPageVariables.push(args)\n      } else {\n        // get an up-to-date cursor based on the previous data set\n        const nextCursor = getGetFetchMore()(data[data.length - 1], data)\n\n        // break early if there's no next cursor\n        // otherwise we'll start from the beginning\n        // which will cause unwanted duplication\n        if (!nextCursor) {\n          break\n        }\n\n        const pageArgs = [\n          // remove the last argument (the previously saved cursor)\n          ...args.slice(0, -1),\n          nextCursor,\n        ]\n\n        data.push(await originalQueryFn(...pageArgs))\n        rebuiltPageVariables.push(pageArgs)\n      }\n    } while (pageVariables.length)\n\n    queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n      data[data.length - 1],\n      data\n    )\n    queryInfoRef.current.query.pageVariables = rebuiltPageVariables\n\n    return data\n  }\n\n  const queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  if (\n    typeof queryInfo.query.canFetchMore === 'undefined' &&\n    typeof queryInfo.data !== 'undefined'\n  ) {\n    queryInfo.query.canFetchMore = getGetFetchMore()(\n      queryInfo.data[queryInfo.data.length - 1],\n      queryInfo.data\n    )\n  }\n\n  queryInfoRef.current = queryInfo\n\n  let {\n    refetch,\n    data = [],\n    query: { canFetchMore },\n  } = queryInfo\n\n  // Here we seed the pageVariabes for the query\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [\n      [...queryInfo.query.queryKey, ...queryInfo.query.queryVariables],\n    ]\n  }\n\n  const fetchMore = React.useCallback(\n    (fetchMoreInfo = queryInfoRef.current.query.canFetchMore) =>\n      queryInfoRef.current.query.canFetchMore\n        ? refetch({\n            force: true,\n            __queryFn: async (...args) => {\n              try {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: true,\n                }))\n\n                const newArgs = [...args, fetchMoreInfo]\n                queryInfoRef.current.query.pageVariables.push(newArgs)\n\n                const data = [\n                  ...queryInfoRef.current.data,\n                  await originalQueryFn(...newArgs),\n                ]\n\n                queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n                  data[data.length - 1],\n                  data\n                )\n\n                return data\n              } finally {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: false,\n                }))\n              }\n            },\n          })\n        : void 0,\n    [getGetFetchMore, originalQueryFn, refetch]\n  )\n\n  handleSuspense(queryInfo)\n\n  return {\n    ...queryInfo,\n    data,\n    canFetchMore,\n    fetchMore,\n  }\n}\n","import React from 'react'\n\nimport { queryCache } from './queryCache'\n\nexport function useIsFetching() {\n  const [state, setState] = React.useState({})\n\n  React.useEffect(() => {\n    return queryCache.subscribe(() => setState({}))\n  }, [])\n\n  return React.useMemo(() => state && queryCache.isFetching, [state])\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function usePaginatedQuery(...args) {\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const lastDataRef = React.useRef()\n\n  // If latestData is set, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  const query = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  let { data: latestData, status } = query\n\n  React.useEffect(() => {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  let resolvedData = latestData\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success'\n  }\n\n  handleSuspense(query)\n\n  return {\n    ...query,\n    resolvedData,\n    latestData,\n    status,\n  }\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function useQuery(...args) {\n  const query = useBaseQuery(...getQueryArgs(args))\n\n  handleSuspense(query)\n\n  return query\n}\n"],"names":["_uid","uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","useGetLatest","obj","ref","React","useRef","current","useCallback","functionalUpdate","updater","old","stableStringifyReplacer","_","value","isObject","Object","assign","keys","sort","map","key","stableStringify","JSON","stringify","a","Array","isArray","isDocumentVisible","document","undefined","visibilityState","getQueryArgs","args","hasOwnProperty","queryKey","variables","queryFn","config","Error","useMountedCallback","callback","mounted","handleSuspense","queryInfo","suspense","useErrorBoundary","status","query","wasSuspended","refetch","configContext","createContext","defaultConfigRef","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchAllOnWindowFocus","refetchInterval","queryKeySerializerFn","defaultQueryKeySerializerFn","queryHash","parse","queryFnParamsFilter","d","throwOnError","onMutate","onSuccess","onError","onSettled","refetchOnMount","isDataEqual","deepEqual","b","length","i","prototype","call","useConfigContext","useContext","then","direct","Promise","resolve","body","recover","result","e","f","arguments","apply","this","reject","queryCache","listeners","cache","queries","isFetching","notifyGlobalListeners","values","reduce","acc","state","forEach","subscribe","cb","push","splice","indexOf","clear","findQueries","predicate","exact","deepIncludes","some","filter","getQueries","getQuery","getQueryData","_cache$getQuery","data","removeQueries","foundQueries","clearTimeout","staleTimeout","refetchQueries","force","all","fetch","err","_buildQuery","userQueryKey","queryVariables","options","reducer","queryReducer","defaultQueryReducer","noQueryHash","initialData","hasInitialData","isStale","manual","instances","type","actionInit","initialStatus","dispatch","action","onStateUpdate","scheduleStaleTimeout","Infinity","setTimeout","actionMarkStale","scheduleGarbageCollection","actionMarkGC","cacheTimeout","markedForGarbageCollection","heal","cancelled","updateInstance","instance","found","find","id","instanceId","cancelQueries","tryFetchData","promise","cancel","actionFailed","failureCount","shouldContinueRetryOnFocus","delay","__queryFn","_async","actionFetch","setData","actionError","setState","actionSetState","actionSuccess","makeQuery","prefetchQuery","res","wasPrefetched","setQueryData","makeQueryCache","canFetchMore","updatedAt","Date","now","removePreviousHandler","onWindowFocus","navigator","onLine","refetchOnWindowFocus","catch","setFocusHandler","_await","handleFocus","_window","addEventListener","removeEventListener","getDefaultState","_empty","actionReset","_awaitIgnored","actionLoading","_invoke","actionResolve","actionReject","mutationReducer","useBaseQuery","queryRef","newQuery","rerender","useState","getLatestConfig","rest","useEffect","currentRefetchInterval","clearInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","pact","s","o","_settle","bind","v","observer","_Pact","onFulfilled","onRejected","_this","thenable","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","thrown","finalizer","children","configContextValue","newConfig","useMemo","Provider","c","queryInfoRef","getFetchMore","getGetFetchMore","originalQueryFn","pageVariables","rebuiltPageVariables","shift","nextCursor","pageArgs","slice","fetchMore","fetchMoreInfo","isFetchingMore","newArgs","mutationFn","useReducer","getMutationFn","getConfig","latestMutationRef","mutate","mutationId","snapshotValue","isLatest","reset","lastDataRef","latestData","resolvedData"],"mappings":"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"}