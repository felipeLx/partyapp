{"ast":null,"code":"var _jsxFileName = \"/home/felipelx/Desktop/workspace/NodeJs/server-front/client/src/containers/Auth/Auth.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\nconst auth = React.memo(props => {\n  const [controls, setControls] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Mail Address'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const [isSignup, setIsSignup] = useState(true);\n  const {\n    authRedirectPath,\n    onSetAuthRedirectPath\n  } = props;\n  useEffect(() => {\n    if (authRedirectPath !== '/') {\n      onSetAuthRedirectPath();\n    }\n  }, [authRedirectPath, onSetAuthRedirectPath]);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(controls, {\n      [controlName]: updateObject(controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, controls[controlName].validation),\n        touched: true\n      })\n    });\n    setControls(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(controls.email.value, controls.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = () => {\n    setIsSignup(!isSignup);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in controls) {\n    formElementsArray.push({\n      id: key,\n      config: controls[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 20\n      }\n    });\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, props.error.message);\n  }\n\n  let authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: props.authRedirectPath,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 28\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n    clicked: switchAuthModeHandler,\n    btnType: \"Danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"SWITCH TO \", isSignup ? 'SIGNIN' : 'SIGNUP'));\n});\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(auth);","map":{"version":3,"sources":["/home/felipelx/Desktop/workspace/NodeJs/server-front/client/src/containers/Auth/Auth.js"],"names":["React","useState","useEffect","connect","Redirect","Input","Button","Spinner","classes","actions","updateObject","checkValidity","auth","memo","props","controls","setControls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","setIsSignup","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","switchAuthModeHandler","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","Auth","mapStateToProps","state","token","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;AAEA,MAAMC,IAAI,GAAGZ,KAAK,CAACa,IAAN,CAAWC,KAAK,IAAI;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC;AACjCgB,IAAAA,KAAK,EAAE;AACHC,MAAAA,WAAW,EAAE,OADV;AAEHC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,OADK;AAEXC,QAAAA,WAAW,EAAE;AAFF,OAFZ;AAMHC,MAAAA,KAAK,EAAE,EANJ;AAOHC,MAAAA,UAAU,EAAE;AACRC,QAAAA,QAAQ,EAAE,IADF;AAERC,QAAAA,OAAO,EAAE;AAFD,OAPT;AAWHC,MAAAA,KAAK,EAAE,KAXJ;AAYHC,MAAAA,OAAO,EAAE;AAZN,KAD0B;AAejCC,IAAAA,QAAQ,EAAE;AACNV,MAAAA,WAAW,EAAE,OADP;AAENC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,UADK;AAEXC,QAAAA,WAAW,EAAE;AAFF,OAFT;AAMNC,MAAAA,KAAK,EAAE,EAND;AAONC,MAAAA,UAAU,EAAE;AACRC,QAAAA,QAAQ,EAAE,IADF;AAERK,QAAAA,SAAS,EAAE;AAFH,OAPN;AAWNH,MAAAA,KAAK,EAAE,KAXD;AAYNC,MAAAA,OAAO,EAAE;AAZH;AAfuB,GAAD,CAAxC;AA+BA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAAC,IAAD,CAAxC;AAEA,QAAM;AAAE+B,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAA8CnB,KAApD;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAK8B,gBAAgB,KAAK,GAA1B,EAAgC;AAC5BC,MAAAA,qBAAqB;AACxB;AACJ,GAJQ,EAIN,CAAED,gBAAF,EAAoBC,qBAApB,CAJM,CAAT;;AAMA,QAAMC,mBAAmB,GAAG,CAAEC,KAAF,EAASC,WAAT,KAA0B;AAClD,UAAMC,eAAe,GAAG3B,YAAY,CAAEK,QAAF,EAAY;AAC5C,OAACqB,WAAD,GAAe1B,YAAY,CAAEK,QAAQ,CAACqB,WAAD,CAAV,EAAyB;AAChDd,QAAAA,KAAK,EAAEa,KAAK,CAACG,MAAN,CAAahB,KAD4B;AAEhDI,QAAAA,KAAK,EAAEf,aAAa,CAAEwB,KAAK,CAACG,MAAN,CAAahB,KAAf,EAAsBP,QAAQ,CAACqB,WAAD,CAAR,CAAsBb,UAA5C,CAF4B;AAGhDI,QAAAA,OAAO,EAAE;AAHuC,OAAzB;AADiB,KAAZ,CAApC;AAOAX,IAAAA,WAAW,CAACqB,eAAD,CAAX;AACH,GATD;;AAWA,QAAME,aAAa,GAAKJ,KAAF,IAAa;AAC/BA,IAAAA,KAAK,CAACK,cAAN;AACA1B,IAAAA,KAAK,CAAC2B,MAAN,CAAc1B,QAAQ,CAACE,KAAT,CAAeK,KAA7B,EAAoCP,QAAQ,CAACa,QAAT,CAAkBN,KAAtD,EAA6DQ,QAA7D;AACH,GAHD;;AAKA,QAAMY,qBAAqB,GAAG,MAAM;AAChCX,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH,GAFD;;AAII,QAAMa,iBAAiB,GAAG,EAA1B;;AACA,OAAM,IAAIC,GAAV,IAAiB7B,QAAjB,EAA4B;AACxB4B,IAAAA,iBAAiB,CAACE,IAAlB,CAAwB;AACpBC,MAAAA,EAAE,EAAEF,GADgB;AAEpBG,MAAAA,MAAM,EAAEhC,QAAQ,CAAC6B,GAAD;AAFI,KAAxB;AAIH;;AAED,MAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAuBC,WAAW,iBACzC,oBAAC,KAAD;AACI,IAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,IAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmB7B,WAFpC;AAGI,IAAA,aAAa,EAAEgC,WAAW,CAACH,MAAZ,CAAmB5B,aAHtC;AAII,IAAA,KAAK,EAAE+B,WAAW,CAACH,MAAZ,CAAmBzB,KAJ9B;AAKI,IAAA,OAAO,EAAE,CAAC4B,WAAW,CAACH,MAAZ,CAAmBrB,KALjC;AAMI,IAAA,cAAc,EAAEwB,WAAW,CAACH,MAAZ,CAAmBxB,UANvC;AAOI,IAAA,OAAO,EAAE2B,WAAW,CAACH,MAAZ,CAAmBpB,OAPhC;AAQI,IAAA,OAAO,EAAIQ,KAAF,IAAaD,mBAAmB,CAAEC,KAAF,EAASe,WAAW,CAACJ,EAArB,CAR7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,CAAX;;AAYA,MAAKhC,KAAK,CAACqC,OAAX,EAAqB;AACjBH,IAAAA,IAAI,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAED,MAAII,YAAY,GAAG,IAAnB;;AAEA,MAAKtC,KAAK,CAACuC,KAAX,EAAmB;AACfD,IAAAA,YAAY,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAItC,KAAK,CAACuC,KAAN,CAAYC,OAAhB,CADJ;AAGH;;AAED,MAAIC,YAAY,GAAG,IAAnB;;AACA,MAAKzC,KAAK,CAAC0C,eAAX,EAA6B;AACzBD,IAAAA,YAAY,gBAAG,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAEzC,KAAK,CAACkB,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAf;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAExB,OAAO,CAACiD,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,YADL,EAEKH,YAFL,eAGI;AAAM,IAAA,QAAQ,EAAEb,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKS,IADL,eAEI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CAHJ,eAOI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAEN,qBADb;AAEI,IAAA,OAAO,EAAC,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEgCZ,QAAQ,GAAG,QAAH,GAAc,QAFtD,CAPJ,CADJ;AAaP,CAhHY,CAAb;;AAkHA,MAAM4B,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHR,IAAAA,OAAO,EAAEQ,KAAK,CAAC/C,IAAN,CAAWuC,OADjB;AAEHE,IAAAA,KAAK,EAAEM,KAAK,CAAC/C,IAAN,CAAWyC,KAFf;AAGHG,IAAAA,eAAe,EAAEG,KAAK,CAAC/C,IAAN,CAAWgD,KAAX,KAAqB,IAHnC;AAIH5B,IAAAA,gBAAgB,EAAE2B,KAAK,CAAC/C,IAAN,CAAWoB;AAJ1B,GAAP;AAMH,CAPD;;AASA,MAAM6B,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHrB,IAAAA,MAAM,EAAE,CAAExB,KAAF,EAASW,QAAT,EAAmBE,QAAnB,KAAiCgC,QAAQ,CAAErD,OAAO,CAACG,IAAR,CAAcK,KAAd,EAAqBW,QAArB,EAA+BE,QAA/B,CAAF,CAD9C;AAEHG,IAAAA,qBAAqB,EAAE,MAAM6B,QAAQ,CAAErD,OAAO,CAACsD,mBAAR,CAA6B,GAA7B,CAAF;AAFlC,GAAP;AAIH,CALD;;AAOA,eAAe5D,OAAO,CAAEuD,eAAF,EAAmBG,kBAAnB,CAAP,CAAgDjD,IAAhD,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nconst auth = React.memo(props => {\n    const [controls, setControls] = useState({\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n        }\n    });\n\n    const [isSignup, setIsSignup] = useState(true);\n\n    const { authRedirectPath ,onSetAuthRedirectPath } = props;\n\n    useEffect(() => {\n        if ( authRedirectPath !== '/' ) {\n            onSetAuthRedirectPath();\n        }\n    }, [ authRedirectPath ,onSetAuthRedirectPath]);\n\n    const inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = updateObject( controls, {\n            [controlName]: updateObject( controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity( event.target.value, controls[controlName].validation ),\n                touched: true\n            } )\n        } );\n        setControls(updatedControls);\n    }\n\n    const submitHandler = ( event ) => {\n        event.preventDefault();\n        props.onAuth( controls.email.value, controls.password.value, isSignup );\n    }\n\n    const switchAuthModeHandler = () => {\n        setIsSignup(!isSignup);\n    }\n\n        const formElementsArray = [];\n        for ( let key in controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        if ( props.loading ) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if ( props.error ) {\n            errorMessage = (\n                <p>{props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if ( props.isAuthenticated ) {\n            authRedirect = <Redirect to={props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n});\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )( auth );"]},"metadata":{},"sourceType":"module"}