{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from \"axios\";\nimport setAuthToken from \"../../shared/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n}; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: actionTyoes.GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: actionTypes.SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setUserLoading = () => {\n  return {\n    type: actionTypes.USER_LOADING\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    error: error\n  };\n};\nexport const logout = () => {\n  // localStorage.removeItem('token');\n  // localStorage.removeItem('expirationDate');\n  // localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_INITIATE_LOGOUT\n  };\n};\nexport const logoutSucceed = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  // return dispatch => {\n  //     setTimeout(() => {  \n  //         dispatch(this.logout()); \n  //     }, expirationTime * 1000);\n  // };\n  return {\n    type: actionTypes.AUTH_CHECK_TIMEOUT,\n    expirationTime: expirationTime\n  };\n};\nexport const auth = (email, password, isSignUp) => {\n  return {\n    type: actionTypes.AUTH_USER,\n    email: email,\n    password: password,\n    isSignUp: isSignUp\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const setRegisterRedirectPath = path => {\n  return {\n    type: actionTypes.SET_REGISTER_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return {\n    type: actionTypes.AUTH_CHECK_STATE\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/home/felipelx/Desktop/workspace/NodeJs/server-front/client/src/store/actions/auth.js"],"names":["actionTypes","axios","setAuthToken","jwt_decode","authStart","type","AUTH_START","registerUser","userData","history","dispatch","post","then","res","push","catch","err","actionTyoes","GET_ERRORS","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","SET_CURRENT_USER","setUserLoading","USER_LOADING","authSuccess","userId","AUTH_SUCCESS","idToken","authFail","error","logout","AUTH_INITIATE_LOGOUT","logoutSucceed","AUTH_LOGOUT","checkAuthTimeout","expirationTime","AUTH_CHECK_TIMEOUT","auth","email","password","isSignUp","AUTH_USER","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","setRegisterRedirectPath","SET_REGISTER_REDIRECT_PATH","authCheckState","AUTH_CHECK_STATE","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from \"axios\";\nimport setAuthToken from \"../../shared/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n      .post(\"/register\", userData)\n      .then(res => history.push(\"/login\")) // re-direct to login on successful register\n      .catch(err =>\n        dispatch({\n          type: actionTyoes.GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n  \n  // Login - get user token\n  export const loginUser = userData => dispatch => {\n    axios\n      .post(\"/login\", userData)\n      .then(res => {\n        // Save to localStorage\n  // Set token to localStorage\n        const { token } = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n      })\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n\nexport const setCurrentUser = decoded => {\n    return {\n        type: actionTypes.SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\nexport const setUserLoading = () => {\n    return {\n      type: actionTypes.USER_LOADING\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    // localStorage.removeItem('token');\n    // localStorage.removeItem('expirationDate');\n    // localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_INITIATE_LOGOUT\n    };\n}\n\nexport const logoutSucceed = () => {\n    return {type: actionTypes.AUTH_LOGOUT};\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    // return dispatch => {\n    //     setTimeout(() => {  \n    //         dispatch(this.logout()); \n    //     }, expirationTime * 1000);\n    // };\n    return {\n        type: actionTypes.AUTH_CHECK_TIMEOUT,\n        expirationTime: expirationTime\n    }\n};\n\nexport const auth = (email, password, isSignUp) => {\n    return {\n        type: actionTypes.AUTH_USER,\n        email: email,\n        password: password,\n        isSignUp: isSignUp\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n};\n\nexport const setRegisterRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_REGISTER_REDIRECT_PATH,\n        path: path\n    }\n};\n\nexport const authCheckState = () => {\n    return {\n        type: actionTypes.AUTH_CHECK_STATE\n    };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n  };"]},"metadata":{},"sourceType":"module"}