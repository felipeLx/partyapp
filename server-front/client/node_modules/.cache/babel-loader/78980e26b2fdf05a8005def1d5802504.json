{"ast":null,"code":"var _jsxFileName = \"/home/felipelx/Desktop/workspace/NodeJs/server-front/client/src/containers/Auth/Auth.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Link } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\nconst auth = React.memo(props => {\n  const [controls, setControls] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Mail Address'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    password2: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Repita a Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const [isSignup, setIsSignup] = useState(true);\n  const {\n    authRedirectPath,\n    onSetAuthRedirectPath\n  } = props;\n  useEffect(() => {\n    if (authRedirectPath !== '/') {\n      onSetAuthRedirectPath();\n    }\n  }, [authRedirectPath, onSetAuthRedirectPath]);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(controls, {\n      [controlName]: updateObject(controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, controls[controlName].validation),\n        touched: true\n      })\n    });\n    setControls(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    setIsSignup(!isSignup);\n    const newUser = {\n      email: controls.email.value,\n      password: controls.email.value,\n      password2: controls.email.value\n    };\n    props.onAuth(controls.email.value, controls.password.value, isSignup);\n  }; // const switchAuthModeHandler = () => {\n  //     setIsSignup(!isSignup);\n  // }\n\n\n  const formElementsArray = [];\n\n  for (let key in controls) {\n    formElementsArray.push({\n      id: key,\n      config: controls[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 20\n      }\n    });\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, props.error.message);\n  } // let authRedirect = null;\n  // if ( props.isAuthenticated ) {\n  //     authRedirect = <Redirect to={props.authRedirectPath} />\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, \"Registrar\"), \" abaixo\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"grey-text text-darken-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, \"J\\xE1 tem uma conta? \", /*#__PURE__*/React.createElement(Link, {\n    to: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 39\n    }\n  }, \"Log in\")), errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }, \"ENVIAR\")));\n});\nauth.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  error: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath,\n    registerUser: state.auth.registerUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(auth);","map":{"version":3,"sources":["/home/felipelx/Desktop/workspace/NodeJs/server-front/client/src/containers/Auth/Auth.js"],"names":["React","useState","useEffect","connect","Redirect","Link","PropTypes","Input","Button","Spinner","classes","actions","updateObject","checkValidity","auth","memo","props","controls","setControls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","password2","isSignup","setIsSignup","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","newUser","onAuth","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","Auth","propTypes","registerUser","func","isRequired","object","mapStateToProps","state","isAuthenticated","token","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Link } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nconst auth = React.memo(props => {\n    const [controls, setControls] = useState({\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n        },\n        password2: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'password',\n                placeholder: 'Repita a Password'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n    }\n    });\n\n    const [isSignup, setIsSignup] = useState(true);\n\n    const { authRedirectPath ,onSetAuthRedirectPath } = props;\n\n    useEffect(() => {\n        if ( authRedirectPath !== '/' ) {\n            onSetAuthRedirectPath();\n        }\n    }, [authRedirectPath ,onSetAuthRedirectPath]);\n\n    const inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = updateObject( controls, {\n            [controlName]: updateObject( controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity( event.target.value, controls[controlName].validation ),\n                touched: true\n            } )\n        } );\n        setControls(updatedControls);\n    }\n\n    const submitHandler = ( event ) => {\n        event.preventDefault();\n        setIsSignup(!isSignup);\n        const newUser = {\n            email: controls.email.value,\n            password: controls.email.value,\n            password2: controls.email.value\n          };\n        props.onAuth( controls.email.value, controls.password.value, isSignup );\n    }\n\n    // const switchAuthModeHandler = () => {\n    //     setIsSignup(!isSignup);\n    // }\n\n        const formElementsArray = [];\n        for ( let key in controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        if ( props.loading ) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if ( props.error ) {\n            errorMessage = (\n                <p>{props.error.message}</p>\n            );\n        }\n\n        // let authRedirect = null;\n        // if ( props.isAuthenticated ) {\n        //     authRedirect = <Redirect to={props.authRedirectPath} />\n        // }\n\n        return (\n            <div className={classes.Auth}>\n                <h4>\n                    <b>Registrar</b> abaixo\n                </h4>\n                <p className=\"grey-text text-darken-1\">\n                    Já tem uma conta? <Link to=\"/login\">Log in</Link>\n                </p>\n                {/* {authRedirect} */}\n                {errorMessage}\n                <form onSubmit={submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">ENVIAR</Button>\n                </form>\n                {/* <Button\n                    clicked={switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}</Button> */}\n            </div>\n        );\n});\n\nauth.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    error: PropTypes.object.isRequired\n  };\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath,\n        registerUser: state.auth.registerUser\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )( auth );"]},"metadata":{},"sourceType":"module"}